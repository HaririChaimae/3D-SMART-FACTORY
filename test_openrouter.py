#!/usr/bin/env python3
"""
Test rapide d'OpenRouter
=======================

Ce script teste l'int√©gration OpenRouter pour v√©rifier que tout fonctionne.
"""

import os
from dotenv import load_dotenv

# Charger les variables d'environnement
load_dotenv()

def test_openrouter_integration():
    """Test complet de l'int√©gration OpenRouter"""
    print("üß™ TEST D'INTEGRATION OPENROUTER")
    print("=" * 50)

    # Test 1: Import
    try:
        from openrouter_client import openrouter_client, extract_skills_from_cv, generate_interview_questions
        print("‚úÖ Import OpenRouter r√©ussi")
    except ImportError as e:
        print(f"‚ùå Erreur d'import: {e}")
        return False

    # Test 2: Configuration
    api_key = os.environ.get('OPENROUTER_API_KEY')
    if not api_key:
        print("‚ùå OPENROUTER_API_KEY non trouv√©e dans .env")
        print("   Ajoutez: OPENROUTER_API_KEY=sk-or-v1-...")
        return False

    if api_key != "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":
        print("‚ö†Ô∏è  Cl√© API diff√©rente de celle fournie - test avec la v√¥tre")

    print("‚úÖ Configuration OpenRouter OK")

    # Test 3: Connexion
    if not openrouter_client.is_available():
        print("‚ùå Client OpenRouter non disponible")
        return False

    print("‚úÖ Client OpenRouter disponible")

    # Test 4: G√©n√©ration simple
    try:
        test_prompt = "Bonjour, peux-tu me dire ce qu'est Python en une phrase?"
        response = openrouter_client.generate_content(test_prompt, max_tokens=50)
        print("‚úÖ G√©n√©ration de contenu r√©ussie")
        print(f"   R√©ponse: {response[:100]}...")
    except Exception as e:
        print(f"‚ùå Erreur g√©n√©ration: {e}")
        return False

    # Test 5: Extraction de comp√©tences
    try:
        test_cv = """
        D√©veloppeur Python exp√©riment√© avec 5 ans d'exp√©rience.
        Comp√©tences: Python, Django, Flask, SQL, JavaScript, React.
        Exp√©rience en d√©veloppement web et data science.
        """

        cv_data = extract_skills_from_cv(test_cv)
        print("‚úÖ Extraction de comp√©tences r√©ussie")
        print(f"   Comp√©tences trouv√©es: {cv_data.get('skills', [])}")
    except Exception as e:
        print(f"‚ùå Erreur extraction CV: {e}")
        return False

    # Test 6: G√©n√©ration de questions
    try:
        test_knowledge = [
            "Python est un langage de programmation orient√© objet.",
            "Les fonctions en Python se d√©finissent avec 'def'.",
            "Les listes sont des structures de donn√©es mutables."
        ]

        questions = generate_interview_questions(test_knowledge, n=2)
        print("‚úÖ G√©n√©ration de questions r√©ussie")
        print(f"   {len(questions)} questions g√©n√©r√©es")
        for i, q in enumerate(questions[:2], 1):
            print(f"   {i}. {q[:80]}...")
    except Exception as e:
        print(f"‚ùå Erreur g√©n√©ration questions: {e}")
        return False

    # Test 7: Int√©gration preprocessing
    try:
        from preprocessing import preprocess_cv
        test_cv_text = "John Doe, d√©veloppeur Python, exp√©rience 3 ans, comp√©tences Python Django SQL"

        cv_data = preprocess_cv(test_cv_text)
        print("‚úÖ Preprocessing avec OpenRouter r√©ussi")
        print(f"   Nom extrait: {cv_data.get('name', 'N/A')}")
        print(f"   Comp√©tences: {cv_data.get('skills', [])}")
    except Exception as e:
        print(f"‚ùå Erreur preprocessing: {e}")
        return False

    print("\nüéâ TOUS LES TESTS R√âUSSIS!")
    print("   OpenRouter est correctement int√©gr√©")
    print("   L'application peut utiliser l'IA pour:")
    print("   ‚úÖ Extraire les comp√©tences des CV")
    print("   ‚úÖ G√©n√©rer des questions d'entretien")
    print("   ‚úÖ √âvaluer les r√©ponses des candidats")
    return True

def test_fallback():
    """Test du mode fallback"""
    print("\nüîÑ TEST MODE FALLBACK")
    print("=" * 30)

    # D√©sactiver temporairement OpenRouter
    original_key = os.environ.get('OPENROUTER_API_KEY')
    os.environ['OPENROUTER_API_KEY'] = ''

    try:
        from openrouter_client import openrouter_client
        if openrouter_client.is_available():
            print("‚ùå Fallback ne fonctionne pas - OpenRouter encore disponible")
            return False

        print("‚úÖ Mode fallback activ√©")

        # Test extraction basique
        from preprocessing import preprocess_cv
        test_cv = "D√©veloppeur Python avec exp√©rience en Django"

        cv_data = preprocess_cv(test_cv)
        if cv_data.get('skills'):
            print("‚úÖ Extraction basique fonctionne")
            print(f"   Comp√©tences: {cv_data['skills']}")
            return True
        else:
            print("‚ùå Extraction basique √©choue")
            return False

    finally:
        # Restaurer la cl√©
        if original_key:
            os.environ['OPENROUTER_API_KEY'] = original_key

if __name__ == "__main__":
    print("üöÄ TEST OPENROUTER - Entretien Automatis√©")
    print("=" * 50)

    success = test_openrouter_integration()

    if success:
        test_fallback()
        print("\nüéØ R√âSULTAT: Int√©gration OpenRouter r√©ussie!")
        print("   Vous pouvez maintenant utiliser l'application avec:")
        print("   - Extraction IA des comp√©tences")
        print("   - G√©n√©ration de questions personnalis√©es")
        print("   - √âvaluation automatique des r√©ponses")
    else:
        print("\n‚ùå R√âSULTAT: Probl√®me avec l'int√©gration OpenRouter")
        print("   V√©rifiez:")
        print("   1. La cl√© API dans .env")
        print("   2. La connexion internet")
        print("   3. Les d√©pendances install√©es")

        # Tester le fallback
        print("\nüîÑ Test du mode fallback...")
        fallback_ok = test_fallback()
        if fallback_ok:
            print("‚úÖ L'application fonctionnera en mode d√©grad√©")
        else:
            print("‚ùå M√™me le mode fallback ne fonctionne pas")