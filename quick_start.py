#!/usr/bin/env python3
"""
üöÄ D√âMARRAGE RAPIDE - Entretien Automatis√©
==========================================

Ce script configure et lance l'application avec des param√®tres minimaux
pour permettre un test rapide sans configuration complexe.
"""

import os
import sys
import subprocess
import time
from pathlib import Path

def print_header(text):
    """Affiche un en-t√™te"""
    print(f"\n{'='*60}")
    print(f"üöÄ {text}")
    print('='*60)

def check_python_version():
    """V√©rifie la version Python"""
    print("üêç V√©rification Python...")
    version = sys.version_info
    if version.major == 3 and version.minor >= 8:
        print(f"‚úÖ Python {version.major}.{version.minor}.{version.micro} - OK")
        return True
    else:
        print(f"‚ùå Python {version.major}.{version.minor}.{version.micro} - Minimum requis: 3.8")
        return False

def install_dependencies():
    """Installe les d√©pendances"""
    print_header("INSTALLATION D√âPENDANCES")

    requirements_file = "requirements.txt"
    if not os.path.exists(requirements_file):
        print(f"‚ùå Fichier {requirements_file} non trouv√©")
        return False

    print("üì¶ Installation des d√©pendances...")
    try:
        subprocess.check_call([sys.executable, "-m", "pip", "install", "-r", requirements_file])
        print("‚úÖ D√©pendances install√©es")
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Erreur installation: {e}")
        return False

def create_env_file():
    """Cr√©e un fichier .env minimal"""
    print_header("CONFIGURATION .ENV")

    if os.path.exists('.env'):
        print("‚ÑπÔ∏è  Fichier .env existe d√©j√†")
        return True

    print("üìù Cr√©ation du fichier .env minimal...")

    env_content = """# Configuration minimale pour test rapide
SECRET_KEY=quick-start-test-key-12345
DATABASE_URL=sqlite:///test.db
FLASK_ENV=development
DEBUG=True

# Optionnel - laissez vide pour utiliser les fallbacks
GOOGLE_API_KEY=
EMAIL_USER=
EMAIL_PASSWORD=
"""

    try:
        with open('.env', 'w') as f:
            f.write(env_content)
        print("‚úÖ Fichier .env cr√©√©")
        print("üí° Vous pouvez ajouter GOOGLE_API_KEY et EMAIL_USER plus tard")
        return True
    except Exception as e:
        print(f"‚ùå Erreur cr√©ation .env: {e}")
        return False

def setup_database():
    """Configure la base de donn√©es"""
    print_header("CONFIGURATION BASE DE DONN√âES")

    # Pour le d√©marrage rapide, on utilise SQLite
    print("üóÑÔ∏è  Configuration SQLite pour test rapide...")

    # Modifier temporairement DATABASE_URL
    os.environ['DATABASE_URL'] = 'sqlite:///quick_start.db'

    try:
        # Tester l'import et la cr√©ation des tables
        from db import create_tables
        create_tables()
        print("‚úÖ Base de donn√©es SQLite configur√©e")
        return True
    except Exception as e:
        print(f"‚ùå Erreur base de donn√©es: {e}")
        print("   Essayez: pip install psycopg2-binary")
        return False

def create_test_data():
    """Cr√©e des donn√©es de test"""
    print_header("CR√âATION DONN√âES TEST")

    try:
        from db import get_db_connection
        conn = get_db_connection()
        cur = conn.cursor()

        # Cr√©er un recruteur de test
        cur.execute("""
            INSERT INTO recruiters (username, email, password, profile_picture)
            VALUES (%s, %s, %s, %s)
            ON CONFLICT (email) DO NOTHING
        """, ('Test Recruiter', 'recruiter@gmail.com', '123', None))

        # Cr√©er une entreprise de test
        cur.execute("""
            INSERT INTO companies (name, url, remote_friendly, market, size)
            VALUES (%s, %s, %s, %s, %s)
            ON CONFLICT (name) DO NOTHING
        """, ('TechCorp', 'https://techcorp.com', True, 'Technology', '50-200'))

        # R√©cup√©rer l'ID de l'entreprise
        cur.execute("SELECT id FROM companies WHERE name = %s", ('TechCorp',))
        company_id = cur.fetchone()[0]

        # R√©cup√©rer l'ID du recruteur
        cur.execute("SELECT id FROM recruiters WHERE email = %s", ('recruiter@gmail.com',))
        recruiter_id = cur.fetchone()[0]

        # Cr√©er des offres d'emploi de test
        jobs_data = [
            {
                'title': 'D√©veloppeur Python Senior',
                'description': 'Nous recherchons un d√©veloppeur Python exp√©riment√© pour rejoindre notre √©quipe.',
                'skills': ['python', 'django', 'postgresql', 'api'],
                'location': 'Paris',
                'type': 'full-time',
                'salary_from': 45000,
                'salary_to': 65000
            },
            {
                'title': 'Data Scientist',
                'description': 'Poste de Data Scientist pour analyser nos donn√©es et cr√©er des mod√®les pr√©dictifs.',
                'skills': ['python', 'machine learning', 'pandas', 'scikit-learn'],
                'location': 'Remote',
                'type': 'full-time',
                'salary_from': 50000,
                'salary_to': 70000
            },
            {
                'title': 'D√©veloppeur Frontend React',
                'description': 'Recherche d√©veloppeur frontend exp√©riment√© en React pour notre application web.',
                'skills': ['javascript', 'react', 'typescript', 'css'],
                'location': 'Lyon',
                'type': 'full-time',
                'salary_from': 40000,
                'salary_to': 55000
            }
        ]

        for job in jobs_data:
            cur.execute("""
                INSERT INTO jobs (company_id, recruiter_id, title, description, skills, location, type,
                                salary_from, salary_to, salary_currency, posted)
                VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, CURRENT_DATE)
                ON CONFLICT DO NOTHING
            """, (
                company_id, recruiter_id, job['title'], job['description'],
                job['skills'], job['location'], job['type'],
                job['salary_from'], job['salary_to'], 'EUR'
            ))

        conn.commit()
        cur.close()
        conn.close()

        print("‚úÖ Donn√©es de test cr√©√©es")
        print("   - 1 recruteur: recruiter@gmail.com / 123")
        print("   - 1 entreprise: TechCorp")
        print("   - 3 offres d'emploi")
        return True

    except Exception as e:
        print(f"‚ùå Erreur cr√©ation donn√©es test: {e}")
        return False

def start_application():
    """Lance l'application"""
    print_header("LANCEMENT APPLICATION")

    print("üåê D√©marrage du serveur Flask...")
    print("üì± L'application sera accessible sur: http://127.0.0.1:5000")
    print("üõë Appuyez sur Ctrl+C pour arr√™ter")
    print()

    try:
        # Importer et lancer l'application
        from flask_app import app

        # Forcer SQLite pour le d√©marrage rapide
        app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///quick_start.db'

        print("‚úÖ Application d√©marr√©e avec succ√®s!")
        print("\nüîó Liens importants:")
        print("   üè† Accueil: http://127.0.0.1:5000")
        print("   üíº Offres: http://127.0.0.1:5000/jobs")
        print("   üîê Login: http://127.0.0.1:5000/login")
        print("\nüìß Comptes de test:")
        print("   üëî Recruteur: recruiter@gmail.com / 123")
        print("   üëë Admin: admin@gmail.com / 123")

        app.run(host='127.0.0.1', port=5000, debug=True)

    except ImportError as e:
        print(f"‚ùå Erreur import: {e}")
        print("   V√©rifiez que flask_app.py existe")
    except Exception as e:
        print(f"‚ùå Erreur d√©marrage: {e}")

def main():
    """Fonction principale"""
    print("üöÄ D√âMARRAGE RAPIDE - Entretien Automatis√©")
    print("=" * 60)
    print("Configuration automatique pour test imm√©diat")
    print("Appuyez sur Ctrl+C √† tout moment pour annuler\n")

    # √âtape 1: V√©rifications de base
    if not check_python_version():
        return

    # √âtape 2: Installation d√©pendances
    if not install_dependencies():
        print("‚ùå Installation des d√©pendances √©chou√©e")
        print("   Essayez: pip install -r requirements.txt")
        return

    # √âtape 3: Configuration .env
    if not create_env_file():
        return

    # √âtape 4: Configuration base de donn√©es
    if not setup_database():
        print("‚ùå Configuration base de donn√©es √©chou√©e")
        print("   L'application peut quand m√™me d√©marrer avec des limitations")
        input("Appuyez sur Entr√©e pour continuer...")

    # √âtape 5: Cr√©ation donn√©es test
    if not create_test_data():
        print("‚ö†Ô∏è  Donn√©es de test non cr√©√©es - l'application fonctionnera quand m√™me")

    # √âtape 6: Lancement
    print("\n" + "="*60)
    print("üéâ CONFIGURATION TERMIN√âE!")
    print("="*60)
    print("Votre application est pr√™te √† √™tre test√©e.")
    print("Elle inclut:")
    print("   ‚úÖ Interface web moderne")
    print("   ‚úÖ 3 offres d'emploi de test")
    print("   ‚úÖ Compte recruteur de test")
    print("   ‚úÖ Upload et analyse de CV")
    print("   ‚úÖ Tests techniques automatis√©s")
    print()

    input("Appuyez sur Entr√©e pour lancer l'application...")

    try:
        start_application()
    except KeyboardInterrupt:
        print("\n\nüëã Application arr√™t√©e")
        print("üîÑ Pour relancer: python flask_app.py")
    except Exception as e:
        print(f"\n‚ùå Erreur: {e}")
        print("üîÑ Essayez: python flask_app.py")

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\n\nüëã D√©marrage rapide annul√©")
        print("üí° Vous pouvez toujours configurer manuellement et lancer:")
        print("   python flask_app.py")
    except Exception as e:
        print(f"\n‚ùå Erreur inattendue: {e}")
        print("üîß V√©rifiez votre installation Python et les permissions")